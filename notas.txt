

CREATE TABLE alumnos (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    apellido VARCHAR(255) NOT NULL,
    dni VARCHAR(20) NOT NULL,
    edad INT NOT NULL,
    telefono VARCHAR(20),
    tutor VARCHAR(255),
    regular BOOLEAN NOT NULL,
    curso_id BIGINT
);

CREATE TABLE profesores (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    apellido VARCHAR(255) NOT NULL,
    dni VARCHAR(20) NOT NULL,
    materia_que_dicta VARCHAR(255) NOT NULL,
    curso_id BIGINT,
    activo BOOLEAN NOT NULL
);

CREATE TABLE cursos (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    profesor_id BIGINT,
    alumno_id BIGINT,
    FOREIGN KEY (profesor_id) REFERENCES profesores(id),
    FOREIGN KEY (alumno_id) REFERENCES alumnos(id)
);

CREATE TABLE notas (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    alumno_id BIGINT,
    curso_id BIGINT,
    materia VARCHAR(255) NOT NULL,
    nota DECIMAL(5, 2) NOT NULL,
    trimestre INT NOT NULL,
    FOREIGN KEY (alumno_id) REFERENCES alumnos(id),
    FOREIGN KEY (curso_id) REFERENCES cursos(id)
);

CREATE TABLE examenes (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    nota_id BIGINT,
    examen_numero INT NOT NULL,
    nota DECIMAL(5, 2) NOT NULL,
    FOREIGN KEY (nota_id) REFERENCES notas(id)
);

CREATE TABLE boletines (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    alumno_id BIGINT,
    curso_id BIGINT,
    notas JSON,
    FOREIGN KEY (alumno_id) REFERENCES alumnos(id),
    FOREIGN KEY (curso_id) REFERENCES cursos(id)
);









create database boletines;
use boletines;
select * from profesores;
CREATE TABLE profesores (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    apellido VARCHAR(255) NOT NULL,
    dni VARCHAR(20) NOT NULL UNIQUE,
    activo BOOLEAN NOT NULL
);

CREATE TABLE materias (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL UNIQUE
);
CREATE TABLE cursos (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL
);

CREATE TABLE curso_profesor_materia (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    curso_id BIGINT NOT NULL,
    profesor_id BIGINT NOT NULL,
    materia_id BIGINT NOT NULL,
    FOREIGN KEY (curso_id) REFERENCES cursos(id),
    FOREIGN KEY (profesor_id) REFERENCES profesores(id),
    FOREIGN KEY (materia_id) REFERENCES materias(id),
    UNIQUE (curso_id, materia_id) -- un curso solo puede tener un profesor por materia
);

CREATE TABLE alumnos (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    apellido VARCHAR(255) NOT NULL,
    dni VARCHAR(20) NOT NULL,
    edad INT NOT NULL,
    telefono VARCHAR(20),
    tutor VARCHAR(255),
    regular BOOLEAN NOT NULL,
    curso_id BIGINT NOT NULL,
    FOREIGN KEY (curso_id) REFERENCES cursos(id)
);

CREATE TABLE notas (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    alumno_id BIGINT,
    curso_id BIGINT,
    materia_id BIGINT,
    nota DECIMAL(5, 2) NOT NULL,
    trimestre INT NOT NULL,
    FOREIGN KEY (alumno_id) REFERENCES alumnos(id),
    FOREIGN KEY (curso_id) REFERENCES cursos(id),
    FOREIGN KEY (materia_id) REFERENCES materias(id)
);


INSERT INTO materias (nombre) VALUES
('Matemáticas'),
('Economía'),
('Historia'),
('Biología'),
('Geografía'),
('Lengua'),
('Filosofía');

INSERT INTO profesores (nombre, apellido, dni, activo) VALUES
('Santiago', 'Maidana', '30123456', TRUE),
('Fernando', 'Vargas', '31234567', TRUE),
('Laura', 'Fernández', '32100001', TRUE),
('Carlos', 'Pérez', '32100002', TRUE),
('Ana', 'López', '32100003', TRUE),
('Julieta', 'Martínez', '32100004', TRUE),
('Mariano', 'Gómez', '32100005', TRUE),
('Nicolás', 'Rojas', '32100006', TRUE),
('María', 'Silva', '32100007', TRUE),
('Esteban', 'Ramírez', '32100008', TRUE);

INSERT INTO cursos (nombre) VALUES
('Primero'),
('Segundo'),
('Tercero'),
('Cuarto'),
('Quinto');

-- id_profesor, id_curso, id_materia
INSERT INTO curso_profesor_materia (curso_id, profesor_id, materia_id) VALUES
-- Santiago Maidana (Matemáticas)
(1, 1, 1),
(2, 1, 1),
(3, 1, 1),
(4, 1, 1),

-- Fernando Vargas (Economía)
(4, 2, 2),
(5, 2, 2),

-- Otros profesores
(1, 3, 3), -- Historia
(2, 4, 4), -- Biología
(3, 5, 5), -- Geografía
(4, 6, 6), -- Lengua
(5, 7, 7), -- Filosofía
(5, 8, 1), -- Matemáticas
(2, 9, 3), -- Historia
(3, 10, 6); -- Lengua





exports.editarProfesor = async (req, res) => {
  const { profesor_id, nombre, apellido, dni, activo, curso_id, materia_id, relacion_id } = req.body;
  const activoValor = activo ? 1 : 0;

  const connection = await db.getConnection();
  await connection.beginTransaction();

  try {
    const [dniRepetido] = await connection.query(
      'SELECT id FROM profesores WHERE dni = ? AND id != ?',
      [dni, profesor_id]
    );
    if (dniRepetido.length > 0) {
      throw new Error('Ya existe otro profesor con ese DNI.');
    }

    await connection.query(
      'UPDATE profesores SET nombre = ?, apellido = ?, dni = ?, activo = ? WHERE id = ?',
      [nombre, apellido, dni, activoValor, profesor_id]
    );

    await connection.query(
      'UPDATE curso_profesor_materia SET curso_id = ?, materia_id = ? WHERE id = ?',
      [curso_id, materia_id, relacion_id]
    );

    await connection.commit();
    res.redirect('/profesores');
  } catch (err) {
    await connection.rollback();
    res.redirect(/profesores?error=${encodeURIComponent(err.message)});
  } finally {
    connection.release();
  }
};
<h1 class="mb-4">Profesores</h1>

<div id="contenedor-tabla-profesores">
  <% Object.keys(profesoresPorCurso).forEach(curso => { %>
    <h2 class="mt-4"><%= curso %> Año</h2>
    <div class="table-responsive">
      <table class="table table-striped align-middle">
        <thead class="table-dark">
          <tr>
            <th>DNI</th>
            <th>Apellido</th>
            <th>Nombre</th>
            <th>Materia</th>            
            <th>Activo</th>
            <th>Acciones</th>
            
          </tr>
        </thead>
        <tbody>
          <% profesoresPorCurso[curso].forEach(p => { %>
            <tr>
              <td><%= p.dni %></td>
              <td><%= p.apellido %></td>
              <td><%= p.nombre %></td>              
              <td>
                <% if (p.materia_nombre) { %>
                  <span class="text-success fw-bold">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">
  <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0m-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
</svg>&nbsp;<%= p.materia_nombre %>
                  </span>
                <% } else { %>
                  <span class="text-danger fw-bold">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-circle-fill" viewBox="0 0 16 16">
  <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4m.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2"/>
</svg>&nbsp;No asignado
                  </span>
                <% } %>
              </td>

              <td>
                <div class="form-check form-switch">
                  <input 
                    class="form-check-input switch-activo" 
                    type="checkbox" 
                    role="switch"
                    data-id="<%= p.id %>"
                    <%= p.activo ? 'checked' : '' %>
                  >
                  <span class="ms-2 fw-bold" style="color: <%= p.activo ? 'green' : 'red' %>">
                    <%= p.activo ? 'Sí' : 'No' %>
                  </span>
                </div>
              </td>
              <td>
                <button class="btn btn-sm btn-primary me-1" data-bs-toggle="modal" data-bs-target="#modalEditarProfesor<%= p.id %>">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
                  <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z"/>
                </svg>
                </button>

                <button 
                class="btn btn-sm btn-danger btn-eliminar-profesor" 
                data-id="<%= p.id %>" 
                data-nombre="<%= p.nombre %>" 
                data-apellido="<%= p.apellido %>">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
  <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>
</svg>
              </button>

              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  <% }) %>
</div>



<!-- editar Profesor -->
<% Object.keys(profesoresPorCurso).forEach(curso => { %>
  <% profesoresPorCurso[curso].forEach(p => { %>
    <div class="modal fade" id="modalEditarProfesor<%= p.id %>" tabindex="-1" aria-labelledby="modalEditarProfesorLabel<%= p.id %>" aria-hidden="true">
      <div class="modal-dialog">
        <form method="POST" action="/profesores/editar" class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="modalEditarProfesorLabel<%= p.id %>">Editar Profesor</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
          </div>
          <div class="modal-body">
            <input type="hidden" name="profesor_id" value="<%= p.id %>">

            <div class="mb-3">
              <label class="form-label">Nombre</label>
              <input type="text" class="form-control" name="nombre" value="<%= p.nombre %>" required>
            </div>
            <div class="mb-3">
              <label class="form-label">Apellido</label>
              <input type="text" class="form-control" name="apellido" value="<%= p.apellido %>" required>
            </div>
            <div class="mb-3">
              <label class="form-label">DNI</label>
              <input type="text" class="form-control" name="dni" value="<%= p.dni %>" required pattern="\d+">
            </div>
            <div class="mb-3">
              <label class="form-label">Curso</label>
              <select class="form-select" name="curso_id" required>
                <% cursos.forEach(curso => { %>
                  <option value="<%= curso.id %>" <%= curso.id === p.curso_id ? 'selected' : '' %>><%= curso.nombre %></option>
                <% }) %>
              </select>
            </div>
            <div class="mb-3">
              <label class="form-label">Materia</label>
              <select class="form-select" name="materia_id" required>
                <% materias.forEach(materia => { %>
                  <option value="<%= materia.id %>" <%= materia.id === p.materia_id ? 'selected' : '' %>><%= materia.nombre %></option>
                <% }) %>
              </select>
            </div>
            <div class="form-check form-switch">
              <input class="form-check-input" type="checkbox" name="activo" <%= p.activo ? 'checked' : '' %>>
              <label class="form-check-label">Activo</label>
            </div>
          </div>
          <div class="modal-footer">
            <button type="submit" class="btn btn-primary">Guardar Cambios</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          </div>
        </form>
      </div>
    </div>
  <% }) %>
<% }) %>


<!-- Modal Agregar Profesor -->
<div class="modal fade" id="modalAgregarProfesor" tabindex="-1" aria-labelledby="modalAgregarProfesorLabel" aria-hidden="true">
  <div class="modal-dialog">
    <form id="formAgregarProfesor" class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalAgregarProfesorLabel">Agregar Profesor</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="nombreProfesor" class="form-label">Nombre</label>
          <input type="text" class="form-control" id="nombreProfesor" name="nombre" required>
        </div>
        <div class="mb-3">
          <label for="apellidoProfesor" class="form-label">Apellido</label>
          <input type="text" class="form-control" id="apellidoProfesor" name="apellido" required>
        </div>
        <div class="mb-3">
          <label for="dniProfesor" class="form-label">DNI</label>
          <input type="text" class="form-control" id="dniProfesor" name="dni" required pattern="\d+">
        </div>
        <div class="mb-3">
          <label for="cursoProfesor" class="form-label">Curso</label>
          <select class="form-select" id="cursoProfesor" name="curso_id" required>
            <option value="" selected disabled>Seleccione un curso</option>
            <% cursos.forEach(curso => { %>
                <option value="<%= curso.id %>"><%= curso.nombre %></option>
            <% }) %>
            </select>
        </div>
        <div class="mb-3">
          <label for="materiaProfesor" class="form-label">Materia</label>
          <select class="form-select" id="materiaProfesor" name="materia_id" required>
            <option value="" selected disabled>Seleccione una materia</option>
            <% materias.forEach(materia => { %>
                <option value="<%= materia.id %>"><%= materia.nombre %></option>
            <% }) %>
            </select>
        </div>
        <div class="form-check form-switch">
          <input class="form-check-input" type="checkbox" id="activoProfesor" name="activo" checked>
          <label class="form-check-label" for="activoProfesor">Activo</label>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="submit" class="btn btn-primary">Guardar Profesor</button>
      </div>
    </form>
  </div>
</div>

<script src="/vendor/sweetalert2/sweetalert2.all.min.js"></script>
<script src="/js/profesores.js"></script> ------------------------------agregar profe---------------------------------------

document.getElementById('formAgregarProfesor').addEventListener('submit', async (e) => {
  e.preventDefault();

  const form = e.target;
  const data = {
    nombre: form.nombre.value,
    apellido: form.apellido.value,
    dni: form.dni.value,
    curso_id: form.curso_id.value,
    materia_id: form.materia_id.value,
    activo: form.activo.checked
  };

  try {
    const res = await fetch('/admin/profesores', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });

    if (res.ok) {
      await Swal.fire({
        icon: 'success',
        title: 'Profesor agregado',
        text: 'El profesor se agregó correctamente.',
        timer: 2000,
        showConfirmButton: false
      });
      location.reload();
    } else {
      const errData = await res.json().catch(() => ({}));
      Swal.fire({
        icon: 'error',
        title: 'Error al agregar',
        text: errData.message || 'No se pudo agregar el profesor.'
      });
    }
  } catch (error) {
    console.error(error);
    Swal.fire({
      icon: 'error',
      title: 'Error de conexión',
      text: 'No se pudo conectar con el servidor.'
    });
  }
});